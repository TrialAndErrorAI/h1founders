import { useState } from 'react'
import { Link } from 'react-router-dom'

interface TechStack {
  frameworks: string[]
  analytics: string[]
  hosting: string[]
  cms: string[]
  payments: string[]
  marketing: string[]
  chatWidgets: string[]
  abTesting: string[]
  other: string[]
}

interface AnalysisResult {
  url: string
  techStack: TechStack
  analyzedAt: string
  totalTechnologies: number
}

// Tech signature patterns for detection
const TECH_SIGNATURES = {
  frameworks: {
    'React': [/react\.js/, /react-dom\.js/, /__react/i, /react\.production/],
    'Vue': [/vue\.js/, /vue\.runtime/, /__vue/i],
    'Angular': [/angular\.js/, /angular\.min/, /@angular/],
    'Next.js': [/next\.js/, /_next\//, /next\.config/],
    'Gatsby': [/gatsby/, /___gatsby/],
    'Svelte': [/svelte/],
    'Nuxt': [/nuxt/],
    'Bootstrap': [/bootstrap\.js/, /bootstrap\.css/, /bootstrap\.min/, /class="[^"]*\bcontainer\b/, /class="[^"]*\brow\b/],
    'Tailwind CSS': [/tailwind/, /tw-/],
    'jQuery': [/jquery\.js/, /\$\(/],
    'Alpine.js': [/alpine/, /x-data/],
    'Ember.js': [/ember/],
    'Backbone.js': [/backbone/],
  },
  analytics: {
    'Google Analytics': [/google-analytics\.com/, /gtag/, /ga\.js/],
    'Mixpanel': [/mixpanel\.com/],
    'Segment': [/segment\.com/, /analytics\.js/],
    'Amplitude': [/amplitude\.com/],
    'Hotjar': [/hotjar\.com/],
    'Plausible': [/plausible\.io/],
    'PostHog': [/posthog\.com/],
  },
  hosting: {
    'Cloudflare': [/cloudflare/, /cf-ray/],
    'Vercel': [/vercel/, /x-vercel/],
    'Netlify': [/netlify/, /x-nf-request-id/],
    'AWS': [/amazonaws\.com/, /cloudfront/],
    'DigitalOcean': [/digitalocean/],
    'Heroku': [/herokuapp\.com/],
    'Firebase': [/firebase/, /firebaseapp\.com/],
  },
  cms: {
    'WordPress': [/wp-content/, /wp-includes/, /wordpress/],
    'Webflow': [/webflow/, /wf-/],
    'Contentful': [/contentful/],
    'Strapi': [/strapi/],
    'Sanity': [/sanity\.io/],
    'Ghost': [/ghost\.io/],
  },
  payments: {
    'Stripe': [/stripe\.com/, /stripe\.js/],
    'PayPal': [/paypal\.com/, /paypal\.js/],
    'Square': [/squareup\.com/],
    'Paddle': [/paddle\.com/],
    'Lemon Squeezy': [/lemonsqueezy\.com/],
  },
  marketing: {
    'Mailchimp': [/mailchimp/, /mc\.js/],
    'ConvertKit': [/convertkit/],
    'Hubspot': [/hubspot/, /hs-analytics/],
    'ActiveCampaign': [/activecampaign/],
    'SendGrid': [/sendgrid/],
  },
  chatWidgets: {
    'Intercom': [/intercom\.io/, /intercom\.js/],
    'Drift': [/drift\.com/],
    'Zendesk': [/zendesk/],
    'Crisp': [/crisp\.chat/],
    'Tawk.to': [/tawk\.to/],
  },
  abTesting: {
    'Optimizely': [/optimizely/],
    'VWO': [/visualwebsiteoptimizer/, /vwo/],
    'Google Optimize': [/optimize\.google/],
  },
}

async function analyzeTechStack(url: string): Promise<TechStack> {
  // Normalize URL
  if (!url.startsWith('http')) {
    url = 'https://' + url
  }

  try {
    // Use CORS proxy to bypass client-side restrictions
    const proxyUrl = 'https://api.allorigins.win/raw?url='
    const fetchUrl = proxyUrl + encodeURIComponent(url)

    // Fetch the page HTML through proxy
    const response = await fetch(fetchUrl)

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    const html = await response.text()

    // Get response headers (note: proxy doesn't forward original headers)
    const headers: Record<string, string> = {}
    response.headers.forEach((value, key) => {
      headers[key.toLowerCase()] = value.toLowerCase()
    })

    const detected: TechStack = {
      frameworks: [],
      analytics: [],
      hosting: [],
      cms: [],
      payments: [],
      marketing: [],
      chatWidgets: [],
      abTesting: [],
      other: [],
    }

    // Detect each category
    for (const [category, technologies] of Object.entries(TECH_SIGNATURES)) {
      for (const [techName, patterns] of Object.entries(technologies)) {
        for (const pattern of patterns) {
          if (
            html.match(pattern) ||
            Object.values(headers).some(h => h.match(pattern))
          ) {
            detected[category as keyof Omit<TechStack, 'other'>].push(techName)
            break // Only add once per technology
          }
        }
      }
    }

    // Additional detection from meta tags
    const metaGeneratorMatch = html.match(/<meta[^>]+name=["']generator["'][^>]+content=["']([^"']+)["']/i)
    if (metaGeneratorMatch) {
      detected.other.push(`Generated by: ${metaGeneratorMatch[1]}`)
    }

    return detected
  } catch (error) {
    throw new Error(`Failed to analyze ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

export default function TechStackAnalyzer() {
  const [url, setUrl] = useState('')
  const [analyzing, setAnalyzing] = useState(false)
  const [result, setResult] = useState<AnalysisResult | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [copied, setCopied] = useState(false)

  const handleAnalyze = async () => {
    if (!url.trim()) {
      setError('Please enter a URL')
      return
    }

    setAnalyzing(true)
    setError(null)
    setResult(null)

    try {
      const techStack = await analyzeTechStack(url.trim())
      const totalTechnologies = Object.values(techStack).reduce(
        (sum, arr) => sum + arr.length,
        0
      )

      const analysisResult = {
        url: url.trim(),
        techStack,
        analyzedAt: new Date().toISOString(),
        totalTechnologies,
      }

      setResult(analysisResult)

      // Track usage (non-blocking)
      trackAnalysis(analysisResult).catch(err => {
        console.warn('Tracking failed:', err)
        // Don't block user experience if tracking fails
      })
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to analyze URL')
    } finally {
      setAnalyzing(false)
    }
  }

  const trackAnalysis = async (result: AnalysisResult) => {
    try {
      // Generate session ID (use localStorage for persistence)
      let sessionId = localStorage.getItem('h1founders-session-id')
      if (!sessionId) {
        sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
        localStorage.setItem('h1founders-session-id', sessionId)
      }

      // Call tracking API (adjust URL for production)
      const apiUrl = import.meta.env.DEV
        ? 'http://localhost:3000/api/track/tech-stack'
        : '/api/track/tech-stack'

      await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          url: result.url,
          techStack: result.techStack,
          totalTechnologies: result.totalTechnologies,
          sessionId,
        }),
      })
    } catch (error) {
      // Silent fail - don't block user experience
      console.warn('Analytics tracking failed:', error)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !analyzing) {
      handleAnalyze()
    }
  }

  const copyResults = () => {
    if (!result) return

    // Format results as plain text
    let text = `Tech Stack Analysis: ${result.url}\n`
    text += `Analyzed: ${new Date(result.analyzedAt).toLocaleString()}\n`
    text += `Technologies Found: ${result.totalTechnologies}\n\n`

    const categoryNames: Record<string, string> = {
      frameworks: 'Frameworks',
      analytics: 'Analytics & Tracking',
      hosting: 'Hosting & CDN',
      cms: 'Content Management',
      payments: 'Payment Processing',
      marketing: 'Marketing & Email',
      chatWidgets: 'Chat & Support',
      abTesting: 'A/B Testing',
      other: 'Other Technologies',
    }

    Object.entries(result.techStack).forEach(([category, technologies]: [string, string[]]) => {
      if (technologies.length > 0) {
        text += `${categoryNames[category] || category}:\n`
        technologies.forEach((tech: string) => {
          text += `  - ${tech}\n`
        })
        text += '\n'
      }
    })

    navigator.clipboard.writeText(text).then(() => {
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    })
  }

  return (
    <div className="min-h-screen bg-background px-6 py-24">
      <div className="mx-auto max-w-4xl">
        {/* Header */}
        <div className="mb-12">
          <Link to="/tools" className="text-accent hover:text-accent-secondary font-mono text-sm mb-4 inline-block">
            ‚Üê BACK TO TOOLS
          </Link>
          <div className="terminal-prompt mb-2"></div>
          <h1 className="text-4xl font-mono terminal-text matrix-glow mb-4">
            TECH_STACK_ANALYZER/
          </h1>
          <p className="text-foreground-tertiary text-lg mb-2">
            Spy on your competitors. See what they're built with.
          </p>
          <p className="text-foreground-tertiary text-sm font-mono">
            // Enter any URL to discover their marketing and tech stack
          </p>
        </div>

        {/* Input Section */}
        <div className="bg-background-secondary border border-border rounded-lg p-8 mb-8">
          <label className="block text-foreground font-mono mb-3 text-sm">
            COMPETITOR_URL:
          </label>
          <div className="flex gap-3">
            <input
              type="text"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="renovateai.app or https://example.com"
              className="flex-1 bg-background border border-border rounded px-4 py-3 text-foreground font-mono focus:outline-none focus:border-accent transition-colors"
              disabled={analyzing}
            />
            <button
              onClick={handleAnalyze}
              disabled={analyzing}
              className={`
                px-6 py-3 rounded font-mono font-bold transition-all
                ${analyzing
                  ? 'bg-tertiary text-foreground-tertiary cursor-not-allowed'
                  : 'bg-accent text-background hover:shadow-lg hover:shadow-accent/20'
                }
              `}
            >
              {analyzing ? 'ANALYZING...' : 'ANALYZE()'}
            </button>
          </div>
        </div>

        {/* Analyzing Loader */}
        {analyzing && (
          <div className="bg-accent/10 border border-accent/20 rounded-lg p-8 mb-8">
            <div className="flex items-center justify-center gap-4">
              <div className="flex gap-2">
                <span className="w-2 h-2 bg-accent rounded-full animate-pulse"></span>
                <span className="w-2 h-2 bg-accent rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></span>
                <span className="w-2 h-2 bg-accent rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></span>
              </div>
              <p className="text-accent font-mono text-sm">
                Scanning HTML, scripts, and headers...
              </p>
            </div>
          </div>
        )}

        {/* Error Display */}
        {error && (
          <div className="bg-red-900/20 border border-red-500/50 rounded-lg p-6 mb-8">
            <p className="text-red-400 font-mono">ERROR: {error}</p>
            <p className="text-red-400/60 font-mono text-sm mt-2">
              // Note: Some sites block CORS requests. This is a client-side limitation.
            </p>
          </div>
        )}

        {/* Results Display */}
        {result && (
          <div className="space-y-6">
            {/* Summary */}
            <div className="bg-accent/10 border border-accent/20 rounded-lg p-6">
              <h2 className="text-accent font-mono font-bold text-lg mb-2">
                ANALYSIS_COMPLETE ‚úì
              </h2>
              <p className="text-foreground-secondary font-mono text-sm">
                {result.totalTechnologies} technologies detected at {result.url}
              </p>
              <p className="text-foreground-tertiary font-mono text-xs mt-1">
                {new Date(result.analyzedAt).toLocaleString()}
              </p>
            </div>

            {/* Tech Stack Categories */}
            {Object.entries(result.techStack).map(([category, technologies]) => {
              if (technologies.length === 0) return null

              const categoryNames: Record<string, string> = {
                frameworks: 'Frameworks',
                analytics: 'Analytics & Tracking',
                hosting: 'Hosting & CDN',
                cms: 'Content Management',
                payments: 'Payment Processing',
                marketing: 'Marketing & Email',
                chatWidgets: 'Chat & Support',
                abTesting: 'A/B Testing',
                other: 'Other Technologies',
              }

              return (
                <div key={category} className="bg-background-secondary border border-border rounded-lg p-6">
                  <h3 className="text-foreground font-mono font-bold mb-4 text-sm uppercase tracking-wider">
                    {categoryNames[category] || category}
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {technologies.map((tech: string) => (
                      <span
                        key={tech}
                        className="bg-accent/10 text-accent border border-accent/20 px-3 py-1 rounded font-mono text-sm"
                      >
                        {tech}
                      </span>
                    ))}
                  </div>
                </div>
              )
            })}

            {/* No Technologies Found */}
            {result.totalTechnologies === 0 && (
              <div className="bg-background-secondary border border-border rounded-lg p-6">
                <p className="text-foreground-tertiary font-mono text-sm">
                  No technologies detected. This might be a very simple site or behind CORS protection.
                </p>
              </div>
            )}

            {/* Actions */}
            <div className="flex gap-4">
              <button
                onClick={copyResults}
                className="flex-1 bg-accent/10 border border-accent/20 rounded py-3 px-4 text-accent font-mono hover:bg-accent/20 transition-colors"
              >
                {copied ? '‚úì COPIED!' : 'COPY_RESULTS()'}
              </button>
              <button
                onClick={() => {
                  setResult(null)
                  setUrl('')
                  setCopied(false)
                }}
                className="flex-1 bg-background-secondary border border-border rounded py-3 px-4 text-foreground font-mono hover:border-accent transition-colors"
              >
                ANALYZE_ANOTHER()
              </button>
            </div>
          </div>
        )}

        {/* How It Works */}
        {!result && !analyzing && (
          <div className="bg-background-secondary border border-border rounded-lg p-8 mt-8">
            <h3 className="text-foreground font-mono font-bold mb-4">
              HOW_IT_WORKS:
            </h3>
            <ul className="space-y-3 text-foreground-secondary font-mono text-sm">
              <li className="flex items-start">
                <span className="text-accent mr-3">1.</span>
                <span>Enter competitor's website URL (e.g., renovateai.app)</span>
              </li>
              <li className="flex items-start">
                <span className="text-accent mr-3">2.</span>
                <span>We scan their HTML, scripts, and headers</span>
              </li>
              <li className="flex items-start">
                <span className="text-accent mr-3">3.</span>
                <span>Detect frameworks, analytics, hosting, payments, and more</span>
              </li>
              <li className="flex items-start">
                <span className="text-accent mr-3">4.</span>
                <span>Use this intel to understand their tech decisions</span>
              </li>
            </ul>
          </div>
        )}
      </div>
    </div>
  )
}
