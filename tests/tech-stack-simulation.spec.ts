import { test, expect } from '@playwright/test'

test('Simulate exact detection logic from TechStackAnalyzer', async ({ page }) => {
  // Fetch HTML the same way the frontend does
  const response = await page.request.get('http://localhost:3000/api/proxy?url=https://renovateai.app')
  const html = await response.text()

  console.log(`Fetched HTML: ${html.length} characters`)

  // Replicate the exact TECH_SIGNATURES from TechStackAnalyzer
  const TECH_SIGNATURES = {
    buildTools: {
      'Framer': [/framer\.com/, /Generated by Framer/i, /framerusercontent\.com/],
    },
    frameworks: {
      'React': [
        /react\.js/,
        /react-dom\.js/,
        /__react/i,
        /react\.production/,
        /data-react/i,
        /_reactRootContainer/i,
        /create-react-app/i,
        /react-[\d.]+.*\.js/,
      ],
      'Tailwind CSS': [
        /tailwind/,
        /--tw-/,
        /tailwindcss\.com/,
        /class="[^"]*\b(flex|grid|p-\d|m-\d|bg-|text-)/,
      ],
      'Bootstrap': [
        /bootstrap\.js/,
        /bootstrap\.css/,
        /bootstrap\.min/,
        /class="[^"]*\bcontainer\b/,
        /class="[^"]*\brow\b/,
        /class="[^"]*\bcol-/,
        /bootstrap-[\d.]+/,
      ],
    },
  }

  // Get response headers (same way frontend does)
  const headers: Record<string, string> = {}
  const headersList = response.headers()
  Object.entries(headersList).forEach(([key, value]) => {
    headers[key.toLowerCase()] = value.toLowerCase()
  })

  console.log(`Response headers: ${Object.keys(headers).join(', ')}`)
  console.log(`Header values: ${Object.values(headers).join('; ')}`)

  // Run the exact detection logic
  const detected: Record<string, string[]> = {
    frameworks: [],
    buildTools: [],
  }

  console.log('\n=== Running detection logic ===')

  for (const [category, technologies] of Object.entries(TECH_SIGNATURES)) {
    console.log(`\nCategory: ${category}`)
    for (const [techName, patterns] of Object.entries(technologies)) {
      console.log(`  Tech: ${techName}`)
      for (const pattern of patterns) {
        const htmlMatch = html.match(pattern)
        const headerMatch = Object.values(headers).some(h => h.match(pattern))

        if (htmlMatch || headerMatch) {
          console.log(`    ✓ MATCHED! (html=${!!htmlMatch}, header=${!!headerMatch})`)
          detected[category as keyof typeof detected].push(techName)
          break // Only add once per technology
        } else {
          console.log(`    ✗ No match for ${pattern}`)
        }
      }
    }
  }

  console.log('\n=== Final detected ===')
  Object.entries(detected).forEach(([cat, techs]) => {
    console.log(`${cat}: ${techs.join(', ') || '(none)'}`)
  })

  const total = Object.values(detected).reduce((sum, arr) => sum + arr.length, 0)
  console.log(`\nTotal: ${total} technologies`)

  expect(total).toBeGreaterThan(0)
})
