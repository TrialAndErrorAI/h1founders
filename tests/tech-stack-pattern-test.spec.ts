import { test, expect } from '@playwright/test'

test('Direct pattern matching test - debug why patterns fail', async ({ page }) => {
  // Get the actual HTML from renovateai.app
  const response = await page.request.get('http://localhost:3000/api/proxy?url=https://renovateai.app')
  const html = await response.text()

  console.log(`HTML length: ${html.length} chars`)
  console.log(`First 1000 chars:\n${html.substring(0, 1000)}`)

  // Test individual patterns from TechStackAnalyzer
  const patterns = {
    'Framer': [/framer\.com/, /Generated by Framer/i, /framerusercontent\.com/],
    'React': [
      /react\.js/,
      /react-dom\.js/,
      /__react/i,
      /react\.production/,
      /data-react/i,
      /_reactRootContainer/i,
      /create-react-app/i,
      /react-[\d.]+.*\.js/,
    ],
    'Tailwind CSS': [
      /tailwind/,
      /--tw-/,
      /tailwindcss\.com/,
      /class="[^"]*\b(flex|grid|p-\d|m-\d|bg-|text-)/,
    ],
    'Bootstrap': [
      /bootstrap\.js/,
      /bootstrap\.css/,
      /bootstrap\.min/,
      /class="[^"]*\bcontainer\b/,
      /class="[^"]*\brow\b/,
      /class="[^"]*\bcol-/,
      /bootstrap-[\d.]+/,
    ],
  }

  console.log('\n=== Testing patterns ===')

  Object.entries(patterns).forEach(([tech, patternList]) => {
    console.log(`\n${tech}:`)
    patternList.forEach((pattern, idx) => {
      const matches = html.match(pattern)
      if (matches) {
        console.log(`  ✓ Pattern ${idx} MATCHES: ${pattern}`)
        console.log(`    Match: "${matches[0].substring(0, 100)}"`)
      } else {
        console.log(`  ✗ Pattern ${idx} no match: ${pattern}`)
      }
    })
  })

  // Now check: does it contain these literal strings?
  console.log('\n=== Literal string checks ===')
  const checks = [
    ['framer', html.toLowerCase().includes('framer')],
    ['react', html.toLowerCase().includes('react')],
    ['tailwind', html.toLowerCase().includes('tailwind')],
    ['bootstrap', html.toLowerCase().includes('bootstrap')],
    ['--tw-', html.includes('--tw-')],
    ['data-react', html.includes('data-react')],
  ]

  checks.forEach(([str, found]) => {
    console.log(`  "${str}": ${found}`)
  })

  // Check for specific classes
  console.log('\n=== Class attribute checks ===')
  const classMatches = html.match(/class="[^"]*"/g) || []
  console.log(`Total class attributes found: ${classMatches.length}`)
  const sampleClasses = classMatches.slice(0, 5)
  sampleClasses.forEach(cls => {
    console.log(`  ${cls.substring(0, 100)}...`)
  })

  // Check specifically for Tailwind utility classes
  const tailwindUtilityPattern = /class="[^"]*\b(flex|grid|p-\d|m-\d|bg-|text-)[^"]*"/
  const hasTailwindUtilities = tailwindUtilityPattern.test(html)
  console.log(`\nTailwind utility classes found: ${hasTailwindUtilities}`)

  if (hasTailwindUtilities) {
    const match = html.match(tailwindUtilityPattern)
    console.log(`  Example: ${match?.[0].substring(0, 150)}...`)
  }
})
