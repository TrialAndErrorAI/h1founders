// Direct test of tech stack analyzer - bypass UI
const fs = require('fs');
const https = require('https');
const http = require('http');

function fetchUrl(url) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const client = url.startsWith('https') ? https : http;

    const options = {
      hostname: urlObj.hostname,
      path: urlObj.pathname + urlObj.search,
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
      },
      timeout: 10000,
    };

    const req = client.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({ html: data, headers: res.headers, status: res.statusCode });
      });
    });

    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    req.end();
  });
}

// Tech signatures from analyzer
const TECH_SIGNATURES = {
  frameworks: {
    'React': [
      /react\.js/,
      /react-dom\.js/,
      /__react/i,
      /react\.production/,
      /data-react/i,
      /_reactRootContainer/i,
      /create-react-app/i,
      /react-[\d.]+.*\.js/,
    ],
    'Vue': [
      /vue\.js/,
      /vue\.runtime/,
      /__vue/i,
      /data-v-[\da-f]{8}/i,
      /data-vue-/i,
      /class="vue-app"/,
      /vue[.-][\d.]+.*\.js/,
    ],
    'Next.js': [
      /next\.js/,
      /_next\//,
      /next\.config/,
      /__NEXT_DATA__/,
      /_next\/static\//,
    ],
    'Tailwind CSS': [
      /tailwind/,
      /--tw-/,
      /tailwindcss\.com/,
      /class="[^"]*\b(flex|grid|p-\d|m-\d|bg-|text-)/,
    ],
  },
  buildTools: {
    'Webpack': [/webpack/, /webpackJsonp/],
    'Vite': [/vite/, /@vite/],
    'Framer': [/framer\.com/, /Generated by Framer/i, /framerusercontent\.com/],
  },
  hosting: {
    'Cloudflare': [/cloudflare/, /cf-ray/],
    'Vercel': [/vercel/, /x-vercel/],
    'Netlify': [/netlify/, /x-nf-request-id/],
  },
};

async function analyzeUrl(url) {
  console.log(`\nAnalyzing: ${url}`);
  console.log('='.repeat(60));

  try {
    const { html, headers, status } = await fetchUrl(url);
    const detected = {};

    // Detect technologies
    for (const [category, technologies] of Object.entries(TECH_SIGNATURES)) {
      detected[category] = [];
      for (const [techName, patterns] of Object.entries(technologies)) {
        for (const pattern of patterns) {
          if (html.match(pattern) || Object.values(headers).some(h => String(h).match(pattern))) {
            detected[category].push(techName);
            break;
          }
        }
      }
    }

    // Count total
    const totalTechnologies = Object.values(detected).reduce((sum, arr) => sum + arr.length, 0);

    console.log(`Status: ${status}`);
    console.log(`Total Technologies Detected: ${totalTechnologies}\n`);

    // Show results
    for (const [category, techs] of Object.entries(detected)) {
      if (techs.length > 0) {
        console.log(`${category}:`);
        techs.forEach(tech => console.log(`  ✓ ${tech}`));
      }
    }

    // Specific checks
    console.log('\nKey Detections:');
    if (url.includes('renovateai')) {
      console.log(`  Framer: ${detected.buildTools?.includes('Framer') ? '✅ YES' : '❌ NO'}`);
    }
    if (url.includes('h1founders')) {
      console.log(`  React: ${detected.frameworks?.includes('React') ? '✅ YES' : '❌ NO'}`);
      console.log(`  Tailwind: ${detected.frameworks?.includes('Tailwind CSS') ? '✅ YES' : '❌ NO'}`);
      console.log(`  Vite: ${detected.buildTools?.includes('Vite') ? '✅ YES' : '❌ NO'}`);
    }
    if (url.includes('react.dev')) {
      console.log(`  React: ${detected.frameworks?.includes('React') ? '✅ YES' : '❌ NO'}`);
    }
    if (url.includes('tailwindcss')) {
      console.log(`  Tailwind: ${detected.frameworks?.includes('Tailwind CSS') ? '✅ YES' : '❌ NO'}`);
    }

    return { url, detected, totalTechnologies, status };
  } catch (error) {
    console.error(`Error: ${error.message}`);
    return { url, error: error.message };
  }
}

async function main() {
  const urls = [
    'https://renovateai.app',
    'https://h1founders.com',
    'https://react.dev',
    'https://tailwindcss.com',
  ];

  const results = [];

  for (const url of urls) {
    try {
      const result = await analyzeUrl(url);
      results.push(result);
      await new Promise(resolve => setTimeout(resolve, 1000)); // Rate limit
    } catch (err) {
      console.error(`Failed to analyze ${url}:`, err);
    }
  }

  // Generate report
  console.log('\n\n');
  console.log('='.repeat(60));
  console.log('COMPARISON REPORT');
  console.log('='.repeat(60));

  let report = '# Tech Stack Analyzer - Direct Detection Results\n\n';
  report += `Generated: ${new Date().toISOString()}\n\n`;

  report += '## Summary Table\n\n';
  report += '| URL | Total Techs | Frameworks | Build Tools | Hosting |\n';
  report += '|-----|------------|-----------|------------|----------|\n';

  for (const result of results) {
    if (result.error) continue;
    const url = result.url.replace('https://', '');
    const frameworks = result.detected.frameworks?.length || 0;
    const buildTools = result.detected.buildTools?.length || 0;
    const hosting = result.detected.hosting?.length || 0;
    report += `| ${url} | ${result.totalTechnologies} | ${frameworks} | ${buildTools} | ${hosting} |\n`;
  }

  report += '\n## Detailed Results\n\n';

  for (const result of results) {
    if (result.error) continue;
    report += `### ${result.url}\n`;
    report += `**Total: ${result.totalTechnologies} technologies**\n\n`;

    for (const [category, techs] of Object.entries(result.detected)) {
      if (techs.length > 0) {
        report += `**${category}:**\n`;
        techs.forEach(tech => report += `- ${tech}\n`);
        report += '\n';
      }
    }
    report += '\n';
  }

  report += '## Key Findings\n\n';
  report += '### renovateai.app\n';
  const renovateResult = results.find(r => r.url?.includes('renovateai'));
  if (renovateResult && !renovateResult.error) {
    report += `- Framer Build Tool: ${renovateResult.detected.buildTools?.includes('Framer') ? '✅ DETECTED' : '❌ MISSED'}\n`;
    report += `- Total Technologies: ${renovateResult.totalTechnologies}\n`;
  } else {
    report += '- Failed to analyze\n';
  }

  report += '\n### h1founders.com\n';
  const h1Result = results.find(r => r.url?.includes('h1founders'));
  if (h1Result && !h1Result.error) {
    report += `- React: ${h1Result.detected.frameworks?.includes('React') ? '✅ DETECTED' : '❌ MISSED'}\n`;
    report += `- Tailwind CSS: ${h1Result.detected.frameworks?.includes('Tailwind CSS') ? '✅ DETECTED' : '❌ MISSED'}\n`;
    report += `- Vite: ${h1Result.detected.buildTools?.includes('Vite') ? '✅ DETECTED' : '❌ MISSED'}\n`;
    report += `- Total Technologies: ${h1Result.totalTechnologies}\n`;
  } else {
    report += '- Failed to analyze\n';
  }

  report += '\n### react.dev\n';
  const reactResult = results.find(r => r.url?.includes('react.dev'));
  if (reactResult && !reactResult.error) {
    report += `- React: ${reactResult.detected.frameworks?.includes('React') ? '✅ DETECTED (CRITICAL)' : '❌ MISSED (CRITICAL)'}\n`;
    report += `- Total Technologies: ${reactResult.totalTechnologies}\n`;
  } else {
    report += '- Failed to analyze\n';
  }

  report += '\n### tailwindcss.com\n';
  const tailwindResult = results.find(r => r.url?.includes('tailwindcss'));
  if (tailwindResult && !tailwindResult.error) {
    report += `- Tailwind CSS: ${tailwindResult.detected.frameworks?.includes('Tailwind CSS') ? '✅ DETECTED (CRITICAL)' : '❌ MISSED (CRITICAL)'}\n`;
    report += `- Total Technologies: ${tailwindResult.totalTechnologies}\n`;
  } else {
    report += '- Failed to analyze\n';
  }

  console.log('\n' + report);

  // Save report
  fs.writeFileSync('/tmp/tech-stack-direct-results.md', report);
  console.log('Report saved to /tmp/tech-stack-direct-results.md');

  process.exit(0);
}

main().catch(console.error);
